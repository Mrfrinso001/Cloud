name: RDP

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'RDP username'
        required: false
        default: 'RDP'
      password:
        description: 'RDP password (blank â†’ default BlackHole38)'
        required: false
        default: ''

  # Auto restart every 5 hours
  schedule:
    - cron: '0 */5 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Cleanup old Tailscale ghosts
        shell: pwsh
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
        run: |
          $headers = @{
            "Authorization" = "Bearer $env:TAILSCALE_API_KEY"
          }
          
          try {
            # Get all devices
            $response = Invoke-RestMethod -Uri "https://api.tailscale.com/api/v2/tailnet/-/devices" -Headers $headers -Method Get
            
            # Find all rdp-ci-node machines (including numbered ones)
            $rdpMachines = $response.devices | Where-Object { 
              $_.hostname -match "^rdp-ci-node(-\d+)?$"
            }
            
            Write-Host "Found $($rdpMachines.Count) RDP machines in tailnet"
            
            # Delete ALL rdp-ci-node machines (even if online)
            foreach ($machine in $rdpMachines) {
              Write-Host "Deleting: $($machine.hostname) [ID: $($machine.id), Online: $($machine.online)]"
              try {
                Invoke-RestMethod -Uri "https://api.tailscale.com/api/v2/device/$($machine.id)" -Headers $headers -Method Delete
                Write-Host "Successfully deleted $($machine.hostname)"
              } catch {
                Write-Warning "Failed to delete $($machine.hostname): $_"
              }
            }
          } catch {
            Write-Warning "Failed to cleanup ghosts: $_"
          }

      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create/Update RDP User (with net user)
        shell: pwsh
        env:
          INPUT_USERNAME: ${{ github.event.inputs.username }}
          INPUT_PASSWORD: ${{ github.event.inputs.password }}
        run: |
          $username = if ([string]::IsNullOrWhiteSpace($env:INPUT_USERNAME)) { 'RDP' } else { $env:INPUT_USERNAME }
          $finalPassword = if ([string]::IsNullOrWhiteSpace($env:INPUT_PASSWORD)) { 'BlackHole38' } else { $env:INPUT_PASSWORD }

          # Create or update user with guaranteed net user
          Write-Host "Ensuring user $username exists with given password..."
          net user $username $finalPassword /add
          net localgroup "Administrators" $username /add
          net localgroup "Remote Desktop Users" $username /add

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=$username"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

      - name: Install Tailscale
        shell: pwsh
        run: |
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item
