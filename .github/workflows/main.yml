name: RDP

on:
  workflow_dispatch:
    inputs:
      username:
        description: 'RDP username'
        required: false
        default: 'RDP'
      password:
        description: 'RDP password (blank ‚Üí default BlackHole38)'
        required: false
        default: ''

  # Auto restart every 5 hours
  schedule:
    - cron: '0 */5 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Cleanup old Tailscale ghosts
        shell: pwsh
        env:
          TAILSCALE_API_KEY: ${{ secrets.TAILSCALE_API_KEY }}
        run: |
          $tailnet     = "taila2a6d7.ts.net"
          $machinesUrl = "https://api.tailscale.com/api/v2/tailnet/$tailnet/machines"

          Write-Host "üì° Fetching machine list..."
          $resp = curl -s -u "$env:TAILSCALE_API_KEY:`"" $machinesUrl
          if (-not $resp) { Write-Host "‚ùå No response from Tailscale API"; exit 0 }

          $machines = ($resp.Content | ConvertFrom-Json).machines
          if (-not $machines) { Write-Host "‚úÖ No machines in tailnet."; exit 0 }

          $targets = $machines | Where-Object { $_.hostname -like "rdp-ci-node*" }

          if (-not $targets) {
            Write-Host "‚úÖ No rdp-ci-node machines found."
          } else {
            # Sort by lastSeen, keep only most recent
            $latest = $targets | Sort-Object lastSeen -Descending | Select-Object -First 1
            Write-Host "Keeping newest: $($latest.hostname) id=$($latest.id)"

            $ghosts = $targets | Where-Object { $_.id -ne $latest.id }

            if (-not $ghosts) {
              Write-Host "‚úÖ No ghosts to delete."
            } else {
              foreach ($g in $ghosts) {
                $deviceId = $g.id
                Write-Host "üóë Deleting ghost: $($g.hostname) id=$deviceId lastSeen=$($g.lastSeen)"
                $deleteUrl = "https://api.tailscale.com/api/v2/device/$deviceId"
                $delResp = curl -s -X DELETE -u "$env:TAILSCALE_API_KEY:`"" $deleteUrl
                Write-Host "API Response: $delResp"
              }
            }
          }

      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing firewall rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create/Update RDP User with net user
        shell: pwsh
        env:
          INPUT_USERNAME: ${{ github.event.inputs.username }}
          INPUT_PASSWORD: ${{ github.event.inputs.password }}
        run: |
          $username = if ([string]::IsNullOrWhiteSpace($env:INPUT_USERNAME)) { 'RDP' } else { $env:INPUT_USERNAME }
          $finalPassword = if ([string]::IsNullOrWhiteSpace($env:INPUT_PASSWORD)) { 'BlackHole38' } else { $env:INPUT_PASSWORD }

          Write-Host "üîë Creating/updating user $username"
          net user $username $finalPassword /add
          net localgroup "Administrators" $username /add
          net localgroup "Remote Desktop Users" $username /add

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=$username"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

      - name: Install Tailscale
        shell: pwsh
        run: |
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection (Fixed Hostname)
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up `
            --authkey=${{ secrets.TAILSCALE_AUTH }} `
            --hostname=rdp-ci-node `
            --accept-routes --accept-dns
          
          $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4).Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) { Write-Host "‚ùå RDP port unreachable"; exit 1 }
          else { Write-Host "‚úÖ RDP port open & reachable" }

      - name: Display Connection Info
        shell: pwsh
        run: |
          $TailnetDomain = "taila2a6d7.ts.net"
          $hostname = "rdp-ci-node.$TailnetDomain"

          Write-Host "`n=== RDP ACCESS DETAILS ==="
          Write-Host "Tailscale IPv4 : $env:TAILSCALE_IP"
          Write-Host "MagicDNS Host  : $hostname"
          Write-Host "RDP Username   : $env:RDP_USER"
          Write-Host "RDP Password   : $env:RDP_PASS"
          Write-Host "==========================`n"

      - name: Keep Session Alive
        shell: pwsh
        run: |
          $TailnetDomain = "taila2a6d7.ts.net"
          $hostname = "rdp-ci-node.$TailnetDomain"

          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active ‚Üí Connect via DNS $hostname or IP $env:TAILSCALE_IP"
            Start-Sleep -Seconds 300
          }
